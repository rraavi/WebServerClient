#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>

void error(char *msg)
{
	perror(msg);
}

int main(int argc, char **argv)
{
	int pno;
	int sockfd;
	struct sockaddr_in s_addr;
	socklen_t addrsize = sizeof(struct sockaddr);
	char buffer_r[2000];
	char *filename;
	size_t sztord = 0;
	size_t szrd =0;
	pno = atoi(argv[1]);

	if(argc<4)
	{
		printf("Usage: <%s><Address><pno><filename>\n", argv[0]);
	    exit(0);
	}

	if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0)
	{
		error("ERROR IN SOCKET\n");
		exit(0);
	}
    s_addr.sin_family = AF_INET;
    s_addr.sin_port = htons(atoi(argv[2]));
    s_addr.sin_addr.s_addr = inet_addr(argv[1]);
    filename = argv[3];
    int sendreq(char *filename, int sockfd)
    {
    	int n, by_rv, i, sz;
    	char buffer_s[2000], buffer_r[2000];
    	bzero(buffer_s,2000);
    	bzero(buffer_r,2000);
    	printf("Sending the details to the server, they are: %s\n", filename);
    	sprintf(buffer_s,"GET /%s HTTP/1.1\r\nHost: \r\n\r\n", filename);
    	n = sendto(sockfd, buffer_s, strlen(buffer_s), 0, (struct sockaddr*)&s_addr, addrsize);
    	printf("Details sent\n");
    	if(n<0)
    	{
    		error("ERROR SENDING TO THE SOCKET");
    		exit(0);
    	}
    	if((recvfrom(sockfd, (size_t*)&sztord, sizeof(sztord), 0, (struct sockaddr*)&s_addr, &addrsize))<0)
    	{
    		error("ERROR IN RECEIVING");
    	    exit(0);
    	}
    	printf("Size of file: %lu\n", sztord);
    	if (sztord < 0)
    	{
    		error("ERROR TO READ < 0\n");
    		exit(0);
    	}
    	if((szrd = recvfrom(sockfd, buffer_r, sizeof(buffer_r), 0, (struct sockaddr*)&s_addr, &addrsize))<0)
    	{
    		error("ERROR WHILE RECEIVING");
    	    exit(0);
    	}
        printf("%s", buffer_r);
        by_rv = read(sockfd, buffer_r, 2000);
        if(by_rv<0)
        {
        	error("ERROR RECEIVING FROM THE SOCKET");
        }
        printf("\nBytes received %d\n",by_rv);
        printf("%s", buffer_r);
        close(sockfd);
        return 0;
   }

}
